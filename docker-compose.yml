# Add this docker file as chat-agents
version: '3'
services:
  # Backend Services

  chat-agents:
    build:
      context: ./microservices/chat-agents-executor
      args:
        - LOGGER_URL=${LOGGER_URL:?Logger URL is required}
        - LOGGER_TOKEN=${LOGGER_TOKEN:?Logger Token is required}
        - GEMINI_API_KEY=${GEMINI_API_KEY:?Gemini API Key is required}
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      - LOGGER_URL=${LOGGER_URL}
      - LOGGER_TOKEN=${LOGGER_TOKEN}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MONGO_HOST=mongodb://mongodb:27017/chat-agents
      - RABBIT_HOST=rabbitmq
      - RABBIT_PORT=5672

  user-facing-api:
    container_name: user-facing-api
    build:
      context: ./microservices/user-facing-api
      args:
        - USER_API_HOST=${USER_API_HOST}
        - JWT_SECRET=${JWT_SECRET:?JWT Secret is required}
        - ADMIN_PASS=${ADMIN_PASS:?Admin Password is required}
        - ADMIN_EMAIL=${ADMIN_EMAIL:?Admin Email is required}
        - LOGGER_URL=${LOGGER_URL:?Logger URL is required}
        - LOGGER_TOKEN=${LOGGER_TOKEN:?Logger Token is required}
    depends_on:
      - mongodb
      - queue-api-gateway
    ports:
      - "4000:4000"
    environment:
      - HOST=${USER_API_HOST:-localhost}
      - DB_CONNECTION_STRING=mongodb://mongodb:27017/user-facing-api
      - PROMPT_URL=http://queue-api-gateway:8000
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_PASS=${ADMIN_PASS}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - LOGGER_URL=${LOGGER_URL}
      - LOGGER_TOKEN=${LOGGER_TOKEN}

  queue-api-gateway:
    container_name: queue-api-gateway
    build:
      context: ./microservices/queue-api-gateway
      args:
        - LOGGER_URL=${LOGGER_URL:?Logger URL is required}
        - LOGGER_TOKEN=${LOGGER_TOKEN:?Logger Token is required}
    depends_on:
      - mongodb
      - rabbitmq
      - chat-agents
    ports:
      - "8000:8000"
    environment:
      - LOGGER_URL=${LOGGER_URL}
      - LOGGER_TOKEN=${LOGGER_TOKEN}
      - MONGO_HOST=mongodb://mongodb:27017/chat-agents
      - RABBIT_HOST=rabbitmq
      - RABBIT_PORT=5672

  user-matching-service:
    build:
      context: ./microservices/user-matching-service
      args:
        - LOGGER_URL=${LOGGER_URL:?Logger URL is required}
        - LOGGER_TOKEN=${LOGGER_TOKEN:?Logger Token is required}
    depends_on:
      - rabbitmq
      - bloomd
      - milvus
    environment:
      - LOGGER_URL=${LOGGER_URL}
      - LOGGER_TOKEN=${LOGGER_TOKEN}
      - MILVUS_HOST=http://milvus-store:19530
      - RABBIT_HOST=rabbitmq
      - RABBIT_PORT=5672

  # Infrastructure Services

  rabbitmq:
    container_name: chat-agents-queue
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"
      - "15672:15672"

  mongodb:
    container_name: mongo-store
    image: mongo:bionic
    ports:
      - "27017:27017"

  bloomd:
    container_name: bloomd
    image: frankhart2018/bloomd:0.1
    ports:
      - "8673:8673"

  milvus:
    container_name: milvus-store
    image: milvusdb/milvus:v2.4.5
    environment:
      - ETCD_USE_EMBED=true
      - ETCD_DATA_DIR=/var/lib/milvus/etcd
      - ETCD_CONFIG_PATH=/milvus/configs/embedEtcd.yaml
      - COMMON_STORAGETYPE=local
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
      - ${DOCKER_VOLUME_DIRECTORY:-.}/infra-setup/embedEtcd.yaml:/milvus/configs/embedEtcd.yaml
    ports:
      - "19530:19530"
      - "9091:9091"
      - "2379:2379"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    command: milvus run standalone
    